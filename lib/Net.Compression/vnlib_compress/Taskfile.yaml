# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile is specific to this project, since it must be compiled on the target platform
#this simply packs the source code into a tgz file for download

version: '3'

vars:
  PROJECT_NAME: '{{ .PROJECT_NAME | default "vnlib_compress" }}'
  BINARY_DIR: '{{ .BINARY_DIR | default "bin" }}'
  ARTIFACT_DIR: '{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}'

  # optional build variables
  RPMALLOC_SRC_DIR: '../../Utils.Memory/vnlib_rpmalloc' # path to the rpmalloc source code

  # default cmake build parameters
  CMAKE_BUILD_TYPE: '{{ .BUILD_TYPE | default "Release" }}'
  CMAKE_BUILD_DIR: 'build/{{ OS }}'

tasks:

  default:
    desc: "Builds the entire project from source code without using the VNBuild build system for target machines"
    requires:
      vars: [CMAKE_BUILD_DIR, CMAKE_BUILD_TYPE, PROJECT_NAME]
    cmds:
     - cmd: echo "Building {{ .PROJECT_NAME }} in mode {{ .CMAKE_BUILD_TYPE }}"
       silent: true
     
     - task: cmake-build
       vars:
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
         CMAKE_ARGS: '{{ .CLI_ARGS }} {{ .CMAKE_ARGS }}'

     - cmd: echo -e "\033[0;32mYour {{ .PROJECT_NAME }} library files can be found in {{ .USER_WORKING_DIR }}/{{ .CMAKE_BUILD_DIR }}\033[0m"
       silent: true

  debug:
    desc: 'Builds the vnlib_compress library for the current platform in debug mode'
    cmds:
     - task: default
       vars: 
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_BUILD_TYPE: "debug" 
         CMAKE_ARGS: '{{ .CMAKE_ARGS }}'

  cmake-configure:
    desc: 'Configures the build for the current platform'
    internal: true
    requires:
      vars: [CMAKE_BUILD_DIR, CMAKE_BUILD_TYPE]
    cmds:
     - cmd: cmake 
        {{ .CMAKE_ARGS }} 
        -S .
        -B{{ .CMAKE_BUILD_DIR }}
        -DCMAKE_BUILD_TYPE={{ .CMAKE_BUILD_TYPE }}

  cmake-compile:
    desc: 'Compiles the project for the current platform'
    internal: true
    requires:
      vars: [CMAKE_BUILD_DIR]
    cmds:
     - cmd: cmake --build {{ .CMAKE_BUILD_DIR }}/ --config debug
     - cmd: cmake --build {{ .CMAKE_BUILD_DIR }}/ --config release

  cmake-build:
    desc: 'Runs the cmake generate and build commands as a single task'
    internal: true
    requires:
      vars: [CMAKE_BUILD_DIR, CMAKE_BUILD_TYPE, CMAKE_ARGS]
    cmds:
      - task: cmake-configure
        vars:
          CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
          CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
          CMAKE_ARGS: '{{ .CMAKE_ARGS }}'
   
      - task: cmake-compile
        vars:
          CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'

  #called by ci pipline to build the winx64 project
  build:
   desc: 'DO NOT USE. This is an internal task'
   requires:
    vars: [CMAKE_BUILD_DIR, CMAKE_BUILD_TYPE, RPMALLOC_SRC_DIR]
   cmds:
     # build the project assuming we can link against rpmalloc
     # also use the project defaults for CMAKE_BUILD_DIR and CMAKE_BUILD_TYPE
     - task: cmake-build
       vars:
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
         CMAKE_ARGS: '
           {{ .CLI_ARGS }}
           {{ if eq OS "windows" }}-G "Visual Studio 17 2022"{{ end }}
           {{ if eq OS "windows" }}-A x64{{ end }}
           -DCOMPRESS_RPMALLOC_SOURCE_DIR={{ .RPMALLOC_SRC_DIR }}' 

  postbuild_success:
    desc: 'DO NOT USE. This is an internal task'
    requires: 
      vars: [ARTIFACT_DIR]
    cmds:
     - cmd: powershell mkdir -Force '{{ .ARTIFACT_DIR }}'
       ignore_error: true

     - task: pack-parallel
  
  pack-parallel:
    desc: 'Packs the binary artifacts into tar files for distribution for various builds in parallel'
    internal: true
    requires:
      vars: [PROJECT_NAME]
    vars:
      #required files to include in tar
      REL_TAR_FILES: 
        "{{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.lib 
        platform.h
        compression.h
        license.txt"

      DEBUG_TAR_FILES: 
        "{{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.pdb 
        {{ .PROJECT_NAME }}.lib 
        platform.h
        compression.h
        license.txt"

      DIST_HEADERS: 
        "platform.h
         compression.h"
    deps:
     - task: pack-source

     - task: pack-dist
       vars: 
         BUILD_MODE: 'debug'
         TAR_FILES: '{{ .DEBUG_TAR_FILES }}'
         DIST_HEADERS: '{{ .DIST_HEADERS }}'

     - task: pack-dist
       vars: 
         BUILD_MODE: 'release'
         TAR_FILES: '{{ .REL_TAR_FILES }}'
         DIST_HEADERS: '{{ .DIST_HEADERS }}'

  pack-dist:
    desc: 'Packs the binary artifacts into a tar file for distribution'  
    internal: true
    requires:
      vars: [BUILD_MODE, TAR_FILES, DIST_HEADERS]
    vars:
      ARCHIVE_PATH: '{{ .ARTIFACT_DIR }}/msvc-x64-{{ .BUILD_MODE }}-{{ .PROJECT_NAME }}.tgz'
      TARGET_DIR: '{{ .CMAKE_BUILD_DIR }}/{{ .BUILD_MODE }}'
    cmds:
      # publish the license file for distribution
      - cmd: powershell cp ../LICENSE '{{ .TARGET_DIR }}/license.txt'
     
      # publish headers for distribution
      - for: { var: DIST_HEADERS }
        cmd: powershell cp 'src/{{ .ITEM }}' '{{ .TARGET_DIR }}/{{ .ITEM }}'
      
      - cmd: cd {{ .TARGET_DIR }} && tar -czf '{{ .ARCHIVE_PATH }}' {{ .TAR_FILES }}

  pack-source:
    desc: 'Packs the source code into a tar file for distribution' 
    internal: true
    requires:
      vars: [ARTIFACT_DIR, PROJECT_NAME]
    vars:
      TARGET_SOURCE: '{{ .ARTIFACT_DIR }}/src.tgz'
      SOURCE_FILES:
        src/*
        brotli/*
        zlib/*
        zstd/*
        LICENSE
        CMakeLists.txt
        Taskfile.yaml

    cmds:
     - cmd: powershell cp ../LICENSE 'LICENSE' -Force

     - cmd: tar -czf '{{ .TARGET_SOURCE }}' {{ .SOURCE_FILES | join " " }}

     - cmd: powershell rm LICENSE

  dev-init:
    desc: 'Configures the project for local development'
    cmds:
     - task: debug
       vars:
         CMAKE_ARGS: '-DCOMPRESS_RPMALLOC_SOURCE_DIR={{ .RPMALLOC_SRC_DIR }}' 
  
     - cmd: echo "dev init complete"
       silent: true

  #Remove the output dirs on clean
  clean:
    desc: 'Cleans any build artifacts and output directories'
    ignore_error: true
    cmds:
     - for: [ bin/, build/ ]
       cmd: '{{ if eq OS "windows" }}powershell rm -Recurse -Force{{else}}rm -rf{{end}} "{{ .ITEM }}"'
    