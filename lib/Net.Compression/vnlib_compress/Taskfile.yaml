# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile is specific to this project, since it must be compiled on the target platform
#this simply packs the source code into a tgz file for download

version: '3'

vars:
  PROJECT_NAME: 'vnlib_compress'
  RPMALLOC_SRC_DIR: '../../Utils.Memory/vnlib_rpmalloc'    
  BUILD_TYPE: '{{ .BUILD_TYPE | default "Release" }}'
  BUILD_DIR: 'build/{{ OS }}'

tasks:

  default:
    desc: 'Builds the {{ .PROJECT_NAME }} library for the current platform'   
    cmds:
     - cmd: echo "Building {{ .PROJECT_NAME }}"
       silent: true
     
     - cmd: cmake {{ .CLI_ARGS }}
         -B{{ .BUILD_DIR }}/
         -DCMAKE_BUILD_TYPE={{ .BUILD_TYPE }}
     
     - cmake --build {{ .BUILD_DIR }}/ --config Release    

  #called by ci pipline to build the winx64 project
  build:
   desc: 'DO NOT USE. This is an internal task'  

   cmds:
      #the CI pipline may have issues reading modules if the third-party dir is not cleaned every time a build runs, only an issue after build
     - defer: { task: clean-third-party }
     
     #build the local rpmalloc library for linking
     - task: build_rpmalloc
       vars: { RPMALLOC_ARGS: '-DCMAKE_BUILD_TYPE={{ .BUILD_TYPE }}' }

     #build the project
     - task: build-internal
       vars: { CLI_ARGS: '{{ .CLI_ARGS }}' }
  
  build-internal:
    internal: true
    cmds:

     #configure the build with vnlib_rpmalloc since we know the source must be local during CI
     - cmake {{ .CLI_ARGS }} 
       -B{{ .BUILD_DIR }}
       -DCMAKE_BUILD_TYPE={{ .BUILD_TYPE }}
       -DCI_PRECOMPILE=ON
       -DNATIVE_HEAP_NAME={{ if eq OS "windows" }}vnlib_rpmalloc{{else}}libvn_rpmalloc.a{{end}}
       -DNATIVE_HEAP_SRC={{ .RPMALLOC_SRC_DIR }}
       -DNATIVE_HEAP_BIN={{ .RPMALLOC_SRC_DIR }}/{{ .BUILD_DIR }}
       -DNATIVE_HEAP_INCLUDES={{ .RPMALLOC_SRC_DIR }}
     
     #build for platform, since Windows, build in both modes
     - cmd: cmake --build {{ .BUILD_DIR }}/ --config debug
     - cmd: cmake --build {{ .BUILD_DIR }}/ --config release

  #when build succeeds, archive the output into a tgz 
  postbuild_success:
    cmds:
     - cmd: powershell mkdir -Force 'bin/'
     - task: pack_parallel   

  build_rpmalloc:
    internal: true
    cmds:
     - cmd: cd {{ .RPMALLOC_SRC_DIR }} && task build -- {{ .RPMALLOC_ARGS }}

  pack_parallel:
    internal: true
    vars:
      #required files to include in tar
      REL_TAR_FILES: 
        "{{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.lib 
        platform.h
        compression.h
        license.txt"
      DEBUG_TAR_FILES: 
        "{{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.pdb 
        {{ .PROJECT_NAME }}.lib 
        platform.h
        compression.h
        license.txt"

    deps:
     - task: pack_source

     - task: pack_artifacts
       vars: { BUILD_MODE: 'debug', TAR_FILES: '{{ .DEBUG_TAR_FILES }}' }
     - task: pack_artifacts
       vars: { BUILD_MODE: 'release', TAR_FILES: '{{ .REL_TAR_FILES }}' }

  #packs up the binary artifacts for distribution
  pack_artifacts:
    internal: true
    deps:
      - task: embed
        vars: { TARGET: './{{ .BUILD_DIR }}/{{ .BUILD_MODE }}' }
    cmds:
      - cmd: cd {{ .BUILD_DIR }}/{{ .BUILD_MODE }} && tar -czf '../../bin/msvc-x64-{{ .BUILD_MODE }}-{{ .PROJECT_NAME }}.tgz' {{ .TAR_FILES }}

 #add embeded resources to the binary output for distribution
  embed:
    internal: true
    cmds:
     - powershell cp ../LICENSE '{{ .TARGET }}/license.txt'
     
     - for: [ platform.h, compression.h ]
       cmd: powershell cp 'src/{{ .ITEM }}' '{{ .TARGET }}/{{ .ITEM }}'  
  
  #packages source code for distribution
  pack_source:
    internal: true
    vars:
      EXCLUDES:
        
      INCLUDES:
        "src/*
        LICENSE
        CMakeLists.txt
        Taskfile.yaml"

    cmds:
     - powershell cp ../LICENSE 'LICENSE' -Force
     #just pack up current directory, excluding build, bin, and git directories
     - tar {{ .EXCLUDES }} -czf 'bin/src.tgz' {{ .INCLUDES }} 

     - cmd: powershell rm LICENSE 


  dev-init:
    desc: 'Configures the project for local development'
    cmds:
     - task: build-internal
       vars: { BUILD_TYPE: Debug }
  
     - cmd: echo "dev init complete"
       silent: true

  #Remove the output dirs on clean
  clean:
    desc: 'Cleans any build artifacts and output directories'
    ignore_error: true
    cmds:
     - for: [ bin/, build/ ]
       cmd: powershell rm -Recurse -Force '{{ .ITEM }}'
    
  clean-third-party:
    internal: true
    ignore_error: true
    cmds:
    - cmd: powershell rm -Recurse -Force '{{ .BUILD_DIR }}/_deps/'
      platforms: [ windows ]
    - cmd: rm -rf '{{ .BUILD_DIR }}/_deps/'
      platforms: [ linux, darwin ]
       