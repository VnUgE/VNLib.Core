# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile is specific to this project, since it must be compiled on the target platform
#this simply packs the source code into a tgz file for download

version: '3'

vars:
  PROJECT_NAME: '{{ .PROJECT_NAME | default "vnlib_compress" }}'
  RPMALLOC_SRC_DIR: '../../Utils.Memory/vnlib_rpmalloc'    
  BINARY_DIR: '{{ .BINARY_DIR | default "bin" }}'
  CMAKE_BUILD_TYPE: '{{ .BUILD_TYPE | default "Release" }}'
  CMAKE_BUILD_DIR: 'build/{{ OS }}'

tasks:

  default:
    desc: 'Builds the vnlib_compress library for the current platform'   
    cmds:
     - cmd: echo "Building {{ .PROJECT_NAME }}"
       silent: true
     
     - task: cmake-build
       vars:
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
         CMAKE_ARGS: '{{ .CLI_ARGS }} {{ .CMAKE_ARGS }}'

  debug:
    cmds:
     - task: default
       vars: 
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_BUILD_TYPE: "debug" 
         CMAKE_ARGS: '{{ .CMAKE_ARGS }}'

  cmake-configure:
    desc: 'Configures the build for the current platform'
    internal: true
    requires: { CMAKE_BUILD_DIR, CMAKE_BUILD_TYPE }
    cmds:
     - cmd: cmake 
        {{ .CMAKE_ARGS }} 
        -S .
        -B{{ .CMAKE_BUILD_DIR }}
        -DCMAKE_BUILD_TYPE={{ .CMAKE_BUILD_TYPE }}

  cmake-compile:
    desc: 'Compiles the project for the current platform'
    requires: { CMAKE_BUILD_DIR }
    internal: true
    cmds:
     - cmd: cmake --build {{ .CMAKE_BUILD_DIR }}/ --config debug
     - cmd: cmake --build {{ .CMAKE_BUILD_DIR }}/ --config release

  cmake-build:
    internal: true
    requires: { CMAKE_BUILD_DIR, CMAKE_BUILD_TYPE }
    cmds:
      - task: cmake-configure
        vars:
          CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
          CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
          CMAKE_ARGS: '{{ .CMAKE_ARGS }}'
   
      - task: cmake-compile
        vars:
          CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'

  #called by ci pipline to build the winx64 project
  build:
   desc: 'DO NOT USE. This is an internal task'  
   cmds:
     # build the project assuming we can link against rpmalloc
     # also use the project defaults for CMAKE_BUILD_DIR and CMAKE_BUILD_TYPE
     - task: cmake-build
       vars:
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
         CMAKE_ARGS: '
           {{ .CLI_ARGS }}
           {{ if eq OS "windows" }}-G "Visual Studio 17 2022"{{ end }}
           {{ if eq OS "windows" }}-A x64{{ end }}
           -DCOMPRESS_RPMALLOC_SOURCE_DIR={{ .RPMALLOC_SRC_DIR }}' 

  #when build succeeds, archive the output into a tgz 
  postbuild_success:
    cmds:
     - cmd: powershell mkdir -Force '{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}'
     - task: pack-parallel
  
  pack-parallel:
    internal: true
    vars:
      #required files to include in tar
      REL_TAR_FILES: 
        "{{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.lib 
        platform.h
        compression.h
        license.txt"

      DEBUG_TAR_FILES: 
        "{{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.pdb 
        {{ .PROJECT_NAME }}.lib 
        platform.h
        compression.h
        license.txt"

      DIST_HEADERS: 
        "platform.h
         compression.h"
    deps:
     - task: pack-source

     - task: pack-dist
       vars: 
         BUILD_MODE: 'debug'
         TAR_FILES: '{{ .DEBUG_TAR_FILES }}'
         DIST_HEADERS: '{{ .DIST_HEADERS }}'

     - task: pack-dist
       vars: 
         BUILD_MODE: 'release'
         TAR_FILES: '{{ .REL_TAR_FILES }}'
         DIST_HEADERS: '{{ .DIST_HEADERS }}'

  pack-dist:
    desc: 'Packs the binary artifacts into a tar file for distribution'  
    internal: true
    requires: { CMAKE_BUILD_DIR, BUILD_MODE, TAR_FILES, DIST_HEADERS }
    vars:
      ARCHIVE_PATH: '{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}/msvc-x64-{{ .BUILD_MODE }}-{{ .PROJECT_NAME }}.tgz'
      TARGET_DIR: '{{ .CMAKE_BUILD_DIR }}/{{ .BUILD_MODE }}'     
    cmds:
      # publish the license file for distribution
      - cmd: powershell cp ../LICENSE '{{ .TARGET_DIR }}/license.txt'
     
      # publish headers for distribution
      - for: { var: DIST_HEADERS }
        cmd: powershell cp 'src/{{ .ITEM }}' '{{ .TARGET_DIR }}/{{ .ITEM }}'
      
      - cmd: cd {{ .TARGET_DIR }} && tar -czf '{{ .ARCHIVE_PATH }}' {{ .TAR_FILES }}

  pack-source:
    desc: 'Packs the source code into a tar file for distribution' 
    internal: true
    vars:
      OUT_DIR: '{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}'
      EXCLUDES: ''
      INCLUDES:
        "src/*
         brotli/*
         zlib/*
         zstd/*
        LICENSE
        CMakeLists.txt
        Taskfile.yaml"

    cmds:
     - cmd: powershell cp ../LICENSE 'LICENSE' -Force   
  
     - cmd: tar {{ .EXCLUDES }} -czf '{{ .OUT_DIR }}/src.tgz' {{ .INCLUDES }} 
  
     - cmd: powershell rm LICENSE 

  dev-init:
    desc: 'Configures the project for local development'
    cmds:
     - task: debug
       vars:
         CMAKE_ARGS: '-DCOMPRESS_RPMALLOC_SOURCE_DIR={{ .RPMALLOC_SRC_DIR }}' 
  
     - cmd: echo "dev init complete"
       silent: true

  #Remove the output dirs on clean
  clean:
    desc: 'Cleans any build artifacts and output directories'
    ignore_error: true
    cmds:
     - for: [ bin/, build/ ]
       cmd: '{{ if eq OS "windows" }}powershell rm -Recurse -Force{{else}}rm -rf{{end}} "{{ .ITEM }}"'
    