# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile is specific to this project, since it must be compiled on the target platform
#this simply packs the source code into a tgz file for download

version: '3'

vars:
  PROJECT_NAME: 'vnlib_compress'

tasks:

  default:
    cmds:
     - cmd: echo "Building {{.PROJECT_NAME}}"
       silent: true
     - cmake -Bbuild/ -DCMAKE_BUILD_TYPE=Release {{.CLI_ARGS}}
     - cmake --build build/ --config Release    

  #called by ci pipline to build the winx64 project
  build:
   cmds:

      #the CI pipline may have issues reading modules if the third-party dir is not cleaned every time a build runs, only an issue after build
     - defer: { task: clean-third-party }
 
     #invoke cmake for build (notify that we are precompiling for ci pipeline and rpmalloc lib should be local)
     - cmake -B./build -DCI_PRECOMPILE=ON -DENABLE_RPMALLOC=ON
 
     #build for platform
     - cmake --build build/ --config debug
     - cmake --build build/ --config release

  #when build succeeds, archive the output into a tgz 
  postbuild_success:
    cmds:
     - cmd: powershell mkdir -Force 'bin/'
     - task: pack_parallel   

  pack_parallel:
    internal: true
    vars:
      #required files to include in tar
      REL_TAR_FILES: 
        "{{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.lib 
        compression.h
        license.txt"
      DEBUG_TAR_FILES: 
        "{{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.pdb 
        {{ .PROJECT_NAME }}.lib 
        compression.h
        license.txt"

    deps:
     - task: pack_source

     - task: pack_artifacts
       vars: { BUILD_MODE: 'debug', TAR_FILES: '{{ .DEBUG_TAR_FILES }}' }
     - task: pack_artifacts
       vars: { BUILD_MODE: 'release', TAR_FILES: '{{ .REL_TAR_FILES }}' }

  #packs up the binary artifacts for distribution
  pack_artifacts:
    internal: true
    deps:
      - task: embed
        vars: { TARGET: './build/{{ .BUILD_MODE }}' }
    cmds:
      - cmd: cd build/{{ .BUILD_MODE }} && tar -czf '../../bin/msvc-x64-{{ .BUILD_MODE }}-{{ .PROJECT_NAME }}.tgz' {{ .TAR_FILES }}

 #add embeded resources to the binary output for distribution
  embed:
    internal: true
    cmds:
     - powershell cp ../LICENSE '{{.TARGET}}/license.txt'
     - powershell cp compression.h '{{.TARGET}}/compression.h'
  
  #packages source code for distribution
  pack_source:
    internal: true
    vars:
      EXCLUDES:
        
      INCLUDES:
       "*.c
        *.h
        CMakeLists.txt
        LICENSE
        Taskfile.yaml"

    cmds:
     #just pack up current directory, excluding build, bin, and git directories
     - tar {{ .EXCLUDES }} -czf 'bin/src.tgz' {{ .INCLUDES }} 


  #Remove the output dirs on clean
  clean:
    ignore_error: true
    cmds:
     - for: [ bin/, build/ ]
       cmd: powershell rm -Recurse '{{.ITEM}}' -Force
    
  clean-third-party:
    internal: false
    ignore_error: true
    cmds:
    - cmd: powershell rm -Recurse -Force 'build/_deps/'
      platforms: [windows]
    - cmd: rm -rf 'build/_deps/'
      platforms: [linux, darwin]
       