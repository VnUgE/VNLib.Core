# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile is specific to this project, since it must be compiled on the target platform
#this simply packs the source code into a tgz file for download

version: '3'

vars:
  THIRD_PARTY_DIR: './third-party'
  PROJECT_NAME: 'vnlib_compress'
  ZLIB_GIT_REPO: 'https://github.com/cloudflare/zlib.git'
  BROTLI_GIT_REPO: 'https://github.com/google/brotli.git'

tasks:

  default:
    cmds:
     - cmd: echo "Building vnlib_compress"
       silent: true
    
    #make third-party dir before cloning libs
     - cmd: powershell -Command "mkdir '{{.THIRD_PARTY_DIR}}' -Force"
       platforms: [windows]
       ignore_error: true  
     - cmd: mkdir -p '{{.THIRD_PARTY_DIR}}'
       platforms: [linux, darwin]
       ignore_error: true

     - task: zlib
     - task: brotli
 
     #invoke cmake for build
     - cmake -B./build {{.CMAKE_ARGS}}
 
     #build for platform
     - cmake --build build/ --config Release
    

  #called by ci pipline to build the winx64 project
  build:
   cmds:
    #make third-party dir before cloning libs
     - cmd: powershell -Command "mkdir '{{.THIRD_PARTY_DIR}}' -Force"
       platforms: [windows]
       ignore_error: true  
     - cmd: mkdir -p '{{.THIRD_PARTY_DIR}}'
       platforms: [linux, darwin]
       ignore_error: true

     - task: zlib
     - task: brotli
  
      #the CI pipline may have issues reading modules if the third-party dir is not cleaned every time a build runs, only an issue after build
     - defer: { task: clean-third-party }
 
     #invoke cmake for build (notify that we are precompiling for ci pipeline and rpmalloc lib should be local)
     - cmake -B./build -DCI_PRECOMPILE=ON -DENABLE_RPMALLOC=ON
 
     #build for platform
     - cmake --build build/ --config Debug
     - cmake --build build/ --config Release

  #when build succeeds, archive the output into a tgz 
  postbuild_success:
    vars:
      #required files to include in tar
      TAR_FILES: "{{.PROJECT_NAME}}.dll {{.PROJECT_NAME}}.pdb {{.PROJECT_NAME}}.lib license.txt"
    cmds:
     - cmd: powershell mkdir -Force './bin'
     #copy source code to target
     - cmd: powershell -Command "tar --exclude build/* --exclude .vs/* --exclude bin/* --exclude third-party/* -czf bin/src.tgz ."
    
     #copy license file to debug and release output
     - cmd: powershell -Command "cp ../LICENSE build/Debug/license.txt"
     - cmd: powershell -Command "cp ../LICENSE build/Release/license.txt"

     #create static-build archives
     - cd build/Debug && tar -czf ../../bin/win-x64-debug.tgz {{.TAR_FILES}}
     - cd build/Release && tar -czf ../../bin/win-x64-release.tgz {{.TAR_FILES}}  

#Remove the output dirs on clean
  clean:
    ignore_error: true
    cmds:
     - for: [ bin/, build/, third-party/ ]
       cmd: powershell Remove-Item -Recurse '{{.ITEM}}' -Force

  #update or install the cloudflare fork of zlib library 
  zlib:
    internal: true
    status:
     - cd {{.THIRD_PARTY_DIR}} && git clone {{.ZLIB_GIT_REPO}}
    cmds:
     - cd {{.THIRD_PARTY_DIR}}/zlib && git pull
  
  #update or install the google brotli library
  brotli:
    internal: true
    status:
     - cd {{.THIRD_PARTY_DIR}} && git clone {{.BROTLI_GIT_REPO}}  
    cmds:
     - cd {{.THIRD_PARTY_DIR}}/brotli && git pull
    
  clean-third-party:
    internal: false
    ignore_error: true
    cmds:
    - cmd: powershell rm -Recurse -Force '{{.THIRD_PARTY_DIR}}'
      platforms: [windows]
    - cmd: rm -rf {{.THIRD_PARTY_DIR}}
      platforms: [linux, darwin]
       