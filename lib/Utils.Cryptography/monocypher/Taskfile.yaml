# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile is called in this directory and is specific to the vnlib_monocypher project
#that handles the MSBuild outside of the solution file

version: '3'

vars:
  PROJECT_NAME: '{{ .PROJECT_NAME | default "vnlib_monocypher" }}'
  MODULE_NAME: '{{ .MODULE_NAME | default "vnlib.core" }}'
  BINARY_DIR: '{{ .BINARY_DIR | default "bin" }}'
  ARTIFACT_OUT_DIR: '{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}'
  CMAKE_BUILD_TYPE: '{{ .BUILD_TYPE | default "Release" }}'
  CMAKE_BUILD_DIR: 'build/{{ OS }}'

tasks:

  default:
    desc: "Builds the entire project from source code without using the VNBuild build system for target machines"
    cmds:
     - cmd: echo "Building {{ .PROJECT_NAME }}"
       silent: true
     
     - task: cmake-build
       vars:
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
         CMAKE_ARGS: '{{ .CLI_ARGS }}'
       
     - cmd: echo -e "\033[0;32mYour {{ .PROJECT_NAME }} library files can be found in {{ .USER_WORKING_DIR }}/{{ .CMAKE_BUILD_DIR }}\033[0m"
       silent: true

  debug:
    cmds:
     - task: default
       vars: { CMAKE_BUILD_TYPE: "debug" }
  
  cmake-configure:
    desc: 'Configures the build for the current platform'
    internal: true
    requires: { CMAKE_BUILD_DIR, CMAKE_BUILD_TYPE }
    cmds:
     - cmd: cmake 
        {{ .CMAKE_ARGS }} 
        -S .
        -B{{ .CMAKE_BUILD_DIR }}
        -DCMAKE_BUILD_TYPE={{ .CMAKE_BUILD_TYPE }}

  cmake-compile:
    desc: 'Compiles the project for the current platform'
    requires: { CMAKE_BUILD_DIR }
    internal: true
    cmds:
      - cmd: cmake --build {{ .CMAKE_BUILD_DIR }}/ --config debug
      - cmd: cmake --build {{ .CMAKE_BUILD_DIR }}/ --config release

  cmake-build:
    internal: true
    requires: { CMAKE_BUILD_DIR, CMAKE_BUILD_TYPE }
    cmds:
      - task: cmake-configure
        vars:
          CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
          CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
          CMAKE_ARGS: '{{ .CMAKE_ARGS }}'
   
      - task: cmake-compile
        vars:
          CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'

  build:
    desc: 'DO NOT USE! This function is used internally during automated builds.'
    cmds:
     - task: cmake-build
       vars:
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
         CMAKE_ARGS: '
           {{ .CLI_ARGS }} 
           {{ if eq OS "windows" }}-G "Visual Studio 17 2022" {{ end }}
           {{ if eq OS "windows" }}-A x64{{ end }}'
  
  postbuild_success:
    desc: 'DO NOT USE! This function is used internally during automated builds.'
    cmds:  
      #make bin dir
      - cmd: powershell mkdir -Force '{{ .ARTIFACT_OUT_DIR }}'
        ignore_error: true

      - task: pack_parallel

  pack_parallel:    
    internal: true
    vars:
      REL_TAR_FILES: 
        "{{ .PROJECT_NAME }}_static.lib
        {{ .PROJECT_NAME }}.dll"

      DEBUG_TAR_FILES:
        "{{ .PROJECT_NAME }}_static.lib
        {{ .PROJECT_NAME }}.dll
        {{ .PROJECT_NAME }}.pdb"
    
    deps:
      - task: pack_source
  
      - task: pack-artifacats
        vars: { BUILD_MODE: 'debug', TAR_FILES: '{{ .DEBUG_TAR_FILES }}' }

      - task: pack-artifacats
        vars: { BUILD_MODE: 'release', TAR_FILES: '{{ .REL_TAR_FILES }}' }
   

  pack-artifacats:
    internal: true
    vars:
      ADD_FILES:
        license.txt 
        monocypher-license.md
        readme.txt
        argon2.h
        blake2b.h
        util.h
        platform.h
      TAR_FILES: "{{ .TAR_FILES }} {{ .ADD_FILES }}"
      TARGET_DIR: '{{ .CMAKE_BUILD_DIR }}/{{ .BUILD_MODE }}'
    cmds:

      #add header files
      - for: [argon2.h, blake2b.h, util.h, platform.h]
        cmd: powershell cp 'src/{{ .ITEM }}' '{{ .TARGET_DIR }}'

      - cmd: powershell cp 'vendor/LICENCE.md' '{{ .TARGET_DIR }}/monocypher-license.md'
      - cmd: powershell cp 'LICENSE' '{{ .TARGET_DIR }}/license.txt'
      - cmd: powershell cp 'build.readme.txt' '{{ .TARGET_DIR }}/readme.txt'

      - cmd: cd {{ .TARGET_DIR }}
         && tar -czf '{{ .ARTIFACT_OUT_DIR }}/msvc-x64-{{ .BUILD_MODE }}-{{ .PROJECT_NAME }}.tgz' {{ .TAR_FILES }}
  
 #packages source code for distribution
  pack_source:
    internal: true
    vars:
      EXCLUDES:
        
      INCLUDES:
        "src/*
        vendor/*
        readme.md
        LICENSE
        CMakeLists.txt
        Taskfile.yaml
        vnlib_monocypher.vcxitems"

    cmds:
     #just pack up current directory, excluding build, bin, and git directories
     - cmd: tar {{ .EXCLUDES }} -czf '{{ .ARTIFACT_OUT_DIR }}/src.tgz' {{ .INCLUDES }}

  dev-init:
    desc: 'Configures the project for local development'
    cmds:
     - task: debug
     - cmd: echo "dev init complete"
       silent: true

  dev:
    desc: Initilaizes the project and re-runs builds on file changes during development
    watch: true
    sources:
     - src/*
     - vendor/**/*
     - CMakelists.txt  
    cmds:
     - task: dev-init

  clean:
    desc: 'Cleans any build artifacts and output directories'
    ignore_error: true
    cmds:
     - for: [ bin/, build/ ]
       cmd: '{{ if eq OS "windows" }}powershell rm -Recurse -Force{{ else }}rm -rf{{ end }} "{{ .ITEM }}"'