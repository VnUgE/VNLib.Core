# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile is called in this directory and is specific to the vnlib_rpmalloc project
#that handles the MSBuild outside of the solution file

version: '3'

vars:
  DEP_NAME: 'rpmalloc'
  PROJECT_NAME: '{{ .PROJECT_NAME | default "vnlib_rpmalloc" }}'
  BUILD_DIR: 'build/{{ OS }}'
  BINARY_DIR: '{{ .BINARY_DIR | default "bin" }}'
  ARTIFACTS_OUT: '{{ .PROJECT_DIR }}/{{ .BINARY_DIR }}'
  BUILD_TYPE: '{{ .BUILD_TYPE | default "Release" }}'       
  ENABLE_GREEDY: '{{ .ENABLE_GREEDY | default "1" }}'       #default to greedy allocator build

tasks:

  default:
    desc: "Builds the entire project from source code without using the VNBuild build system for target machines"
    cmds:
     #init cmake build with greedy enabled
     - task: cmake-configure
       vars: 
         #explicitly pass args so they can be overriden
         CMAKE_ARGS: "{{ .CMAKE_ARGS }}"
         BUILD_TYPE: "{{ .BUILD_TYPE }}"
         BUILD_DIR: "{{ .BUILD_DIR }}"

     - task: cmake-compile
       vars: { BUILD_TYPE: "debug" }
       
     - cmd: echo "Your {{ .PROJECT_NAME }} library file can be found in '{{ .USER_WORKING_DIR }}/{{ .BUILD_DIR }}'"
       silent: true

  debug:
    cmds:
     - task: default
       vars: { BUILD_TYPE: "debug" }

  build:
    desc: 'DO NOT USE! This function is used internally during releases.'
    cmds:
     #init cmake build with greedy enabled
     - task: cmake-configure
       vars: { CMAKE_ARGS: '{{ .CLI_ARGS }} -G "Visual Studio 17 2022" -A x64' }

     - task: cmake-compile
       vars: { BUILD_TYPE: "debug" }
     - task: cmake-compile
       vars: { BUILD_TYPE: "release" }  

  cmake-configure:
    internal: true
    requires: { BUILD_DIR, BUILD_TYPE, CMAKE_ARGS }
    cmds:      
      #build with defaults
      #init cmake build with greedy enabled
      - cmd: cmake 
         -S .
         -B{{ .BUILD_DIR }}/
         -DCMAKE_BUILD_TYPE={{ .BUILD_TYPE }}
         -DENABLE_GREEDY={{ .ENABLE_GREEDY }}
         {{ .CMAKE_ARGS }}
         {{ .CLI_ARGS }}

  cmake-compile:
    internal: true
    requires: { BUILD_DIR, BUILD_TYPE }
    cmds:
      - cmd: cmake 
         --build {{ .BUILD_DIR }}/ 
         --config {{ .BUILD_TYPE }}

  postbuild_success:
    cmds:
      #make bin dir
    - cmd: powershell mkdir -Force '{{ .ARTIFACTS_OUT }}'
      ignore_error: true
  
    - task: pack_parallel

  pack_parallel:
    internal: true
    deps:
     - task: pack_source

     - task: pack_artifacts
       vars: { BUILD_TYPE: 'debug' }
     - task: pack_artifacts
       vars: { BUILD_TYPE: 'release' }

  #packs binary artifacts for distribution
  pack_artifacts:
    internal: true
    requires: { BUILD_DIR, BUILD_TYPE }
    cmds:
     - task: pack_resources
       vars: { TARGET: './{{ .BUILD_DIR }}/{{ .BUILD_TYPE }}' }
     - cmd: "cd {{ .BUILD_DIR }}/{{ .BUILD_TYPE }} 
        && tar -czf '{{ .ARTIFACTS_OUT }}/msvc-x64-{{ .BUILD_TYPE }}-{{ .PROJECT_NAME }}.tgz' ."

  pack_resources:
    internal: true
    requires: { TARGET }
    cmds:
     - cmd: powershell cp NativeHeapApi.h '{{ .TARGET }}/'
     - cmd: powershell cp vendor/license '{{ .TARGET }}/{{ .DEP_NAME }}_license.txt'
     - cmd: powershell cp license '{{ .TARGET }}/license.txt'
     - cmd: powershell cp build.readme.txt '{{ .TARGET }}/readme.txt'
  
  pack_source:
    internal: true
    desc: "Packs up the project source code and creates a tarball in the builds binary directory"
    vars:
      TARGET_SOURCE: '{{ .PROJECT_DIR }}/{{ .BINARY_DIR }}/src.tgz'
      SOURCE_FILES: 
        CMakeLists.txt
        Taskfile.yaml
        vendor
        LICENSE
        NativeHeapApi.h
        '{{ .PROJECT_NAME }}.c'

    cmds:
      #tar up the source
     - cmd: tar -czf '{{ .TARGET_SOURCE }}' {{ .SOURCE_FILES | join " " }}  

  clean:
    desc: 'Cleans any build artifacts and output directories'
    ignore_error: true
    cmds:
     - for: [ bin/, build/ ]
       cmd: '{{ if eq OS "windows" }}powershell rm -Recurse -Force{{else}}rm -rf{{end}} "{{ .ITEM }}"'

  #called by module for initializing the project, it's not internal but hidden
  dev-init:
    internal: false
    cmds:
     - task: debug
  