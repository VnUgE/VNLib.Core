# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile is called in this directory and is specific to the vnlib_mimalloc project
#that handles the MSBuild outside of the solution file

version: '3'

vars:
  DEP_NAME: 'mimalloc'
  PROJECT_NAME: 'vnlib_{{ .DEP_NAME }}'
  ARTIFACTS_OUT: '{{ .PROJECT_DIR }}/{{ .BINARY_DIR }}'

tasks:

  default:
    desc: "Builds the entire project from source code without using the VNBuild build system for target machines"
    cmds:
     #init cmake build with greedy enabled
     - task: build-internal
       vars: 
         BUILD_TYPE: "Release"
         CLI_ARGS: "-DENABLE_GREEDY=1 {{ .CLI_ARGS }}"
     
     - cmd: echo "Your {{ .PROJECT_NAME }} library file can be found in '{{ .USER_WORKING_DIR }}/build'"
       silent: true

  debug:
    cmds:
     - task: build-internal
       vars: 
         BUILD_TYPE: "debug"
         CLI_ARGS: "-DENABLE_GREEDY=1 {{ .CLI_ARGS }}"

  build:
    desc: 'DO NOT USE! This function is used internally during releases.'
    cmds:
     #init cmake build with greedy enabled
     - cmake -B./build -DENABLE_GREEDY=1 {{ .CLI_ARGS }} 
     - cmake --build build/ --config debug
     - cmake --build build/ --config release

  build-internal:
    internal: true
    cmds:      
      #build with defaults
      #init cmake build with greedy enabled
      - cmake -Bbuild/ -DCMAKE_BUILD_TYPE={{ .BUILD_TYPE }} {{ .CLI_ARGS }}
      - cmake --build build/ --config {{ .BUILD_TYPE }}

  postbuild_success:
    cmds:
      #make bin dir
    - cmd: powershell mkdir -Force '{{ .ARTIFACTS_OUT }}'
      ignore_error: true
  
    - task: pack_parallel

  pack_parallel:
    internal: true
    deps:
     - task: pack_source

     - task: pack_artifacts
       vars: { BUILD_TYPE: 'debug' }
     - task: pack_artifacts
       vars: { BUILD_TYPE: 'release' }

  #packs binary artifacts for distribution
  pack_artifacts:
    internal: true
    deps:
     - task: pack_resources
       vars: { TARGET: './build/{{ .BUILD_TYPE }}' }
    cmds:
    - cmd: cd build/{{ .BUILD_TYPE }} && tar -czf '{{ .ARTIFACTS_OUT }}/msvc-x64-{{ .BUILD_TYPE }}-{{ .PROJECT_NAME }}.tgz' .
  
  pack_resources:
    internal: true
    cmds:
     - powershell cp NativeHeapApi.h '{{ .TARGET }}/'
     - powershell cp vendor/license '{{ .TARGET }}/{{ .DEP_NAME }}_license.txt'
     - powershell cp license '{{ .TARGET }}/license.txt'
     - powershell cp build.readme.txt '{{ .TARGET }}/readme.txt'
  
  pack_source:
    internal: true
    desc: "Packs up the project source code and creates a tarball in the builds binary directory"
    vars:
      TARGET_SOURCE: '{{ .PROJECT_DIR }}/{{ .BINARY_DIR }}/src.tgz'
      SOURCE_FILES: 
        CMakeLists.txt
        Taskfile.yaml
        vendor
        LICENSE
        NativeHeapApi.h
        '{{ .PROJECT_NAME }}.c'

    cmds:
      #tar up the source
     - tar -czf '{{ .TARGET_SOURCE }}' {{ .SOURCE_FILES | join " " }}  

  clean:
    ignore_error: true
    cmds:
     - for: [ bin/, build/ ]
       cmd: powershell rm -Recurse -Force '{{.ITEM}}'

  #called by module for initializing the project, it's not internal but hidden
  dev-init:
    internal: false
    cmds:
     - task: debug
  