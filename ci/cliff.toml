# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# A Tera template to be rendered as the changelog's header.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - \
        {% if commit.breaking -%}
            **Breaking Change:** \
        {% endif -%}
        {{ commit.message | split(pat="\n") | first | upper_first | trim }} \
        - \
        {% if commit.scope -%}
           ({{ commit.scope }}) \
        {% endif -%}
        [{{ commit.id | truncate(length=7, end="") }}]\
        (https://git.vaughnnugent.com/cgit/vnuge/vnlib-core.git/commit/?id={{ commit.id }})\ 
    {% endfor %}
{% endfor %}\n
"""
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://git.vaughnnugent.com/cgit/vnuge/vnlib-core.git\
                    /diff?id={{ release.version }}&id2={{ release.previous.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://git.vaughnnugent.com/cgit/vnuge/vnlib-core.git\
                    /diff?id=HEAD&id2={{ release.previous.version }}
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Protect all breaking commits from being filtered
protect_breaking_commits = true
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [

    # Breaking changes (must come first to catch before other parsers)
    { message = "^.*\\)!", breaking = true },

    # Features and additions
    { message = "^feat(\\(.*\\))?:", group = "Added" },
    { message = "^add(\\(.*\\))?:", group = "Added" },
    { message = "^support(\\(.*\\))?:", group = "Added" },
    { message = "^[f|F]eat", group = "Added"},

    # Fixes
    { message = "^[C|c]loses|^[C|c]lose|^[F|f]ixes|^[F|f]ix", group = "Fixed" },
    { message = "^test", group = "Fixed" },

    # Build Changes, and skip any remaining build commits as well
    { message = "^build(:|\\(.*\\):)? ?[Cc]orrect.*", skip = true },
    { message = "^build(:|\\(.*\\):)? ?[Ff]ix.*", skip = true },
    { message = "^build(:|\\(.*\\):).*", group = "Changed" },

    # Changes
    { message = "^refactor(:|\\(.*\\):).*", group = "Changed" },
    { message = "^chore\\(deps\\):", group = "Changed" },

    # Removals
    { message = "^remove(\\(.*\\))?:", group = "Removed" },
    { message = "^delete(\\(.*\\))?:", group = "Removed" },
    { message = "^chore(:|\\(.*\\):)? ?[Rr]emove", group = "Removed" },
    { message = "^chore(:|\\(.*\\):)? ?[Dd]elete", group = "Removed" },

    # Performance upgrades
    { message = "^perf(\\(.*\\))?:", group = "Performance" },

    #skip ci and specific chore tasks
    { message = ".*\\[no ci\\].*", skip = true },
    { message = "^review:", skip = true },
    { message = "^ci(:|\\(.*\\):| )", skip = true },
    { message = "update changelog", skip = true },
    { message = "^chore.*", skip = true },
    { message = "^style.*", skip = true },

    # If the spelling is incorrect, it will be automatically fixed.
    { pattern = '.*', replace_command = 'typos --write-changes -' },
]

# Prevent commits that are breaking from being excluded by commit parsers.
filter_commits = false
# Order releases topologically instead of chronologically.
topo_order = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"

#exclude development tags from changelog
ignore_tags = "[A|a]lpha"

[bump]
initial_tag = "0.1.1"