# https://taskfile.dev

version: '3'

vars:
  BINARY_DIR: '{{ .BINARY_DIR | default "bin" }}'
  TARGET_FRAMEWORK: '{{ .TARGET_FRAMEWORK | default "net8.0" }}'

  TARGET_ARCHES: [ "linux-x64", "win-x64", "osx-x64", "win-arm64", "linux-arm", "linux-arm64", "osx-arm64" ]

tasks:

  default:
    desc: 'Builds the VNLib.WebServer project with defaults'
    vars:
      CONFIGURATION: '{{ .CONFIGURATION | default "release" }}'
    cmds:
     - cmd: cd src/ && dotnet build -c {{ .CONFIGURATION }} {{ .CLI_ARGS }}

  build-debug:
    desc: 'Builds the VNLib.WebServer project in debug mode'
    cmds:
     - task: default
       vars: { CONFIGURATION: 'debug' }

  test:
    desc: 'Runs tests for the VNLib.WebServer project'
    dir: '{{ .USER_WORKING_DIR }}/src'
    vars:
      CONFIG_FILE: '{{ .CONFIG_FILE | default "sample.config.json" }}'
    cmds:
      - cmd: echo "Running tests for VNLib.WebServer"
        silent: true

      - task: build-debug

      #test help command exits successfully
      - cmd: cd 'bin/debug/net8.0' && dotnet VNLib.WebServer.dll --help
  
      #test sample config
      - cmd: cd 'bin/debug/net8.0' &&
         dotnet VNLib.WebServer.dll 
         --verbose 
         --input-off 
         --no-plugins 
         --config {{ .CONFIG_FILE }}
         --dev-test

      - cmd: echo "VNLib.WebServer tests completed successfully"
        silent: true
  
  build:
    desc: 'DO NOT USE. Use vnbuild system to build this project'
    dir: '{{ .USER_WORKING_DIR }}'
    vars:
      INT_DIR: '{{ .SCRATCH_DIR | default "." }}/obj/{{ .MODULE_NAME }}/'
      MS_ARGS: '
        {{ .BUILD_FLAGS }}
        --nologo
        --sc false
        /p:UseCommonOutputDirectory=true 
        /p:IntermediateOutputPath="{{ .INT_DIR }}"'
    cmds:
    # build for each target arch in debug and release mode 
    - for: { var: TARGET_ARCHES }
      cmd: dotnet publish -c debug -r {{ .ITEM }} {{ .MS_ARGS }} 
    
    - for: { var: TARGET_ARCHES }
      cmd: dotnet publish -c release -r {{ .ITEM }} {{ .MS_ARGS }}

    #package as a tool
    #- dotnet pack -c debug {{.MS_ARGS}} -o "{{.PACK_OUT}}/debug/" -p:PackageVersion={{.BUILD_VERSION}}  

  
  postbuild_success:
    desc: 'DO NOT USE. Use vnbuild system to finish the build'
    dir: '{{ .USER_WORKING_DIR }}'
    vars:
      RELEASE_DIR: "{{ .BINARY_DIR }}/release/{{ .TARGET_FRAMEWORK }}"
    cmds:
     - cmd: mkdir -p '{{ .BINARY_DIR }}'

     #remove unnecessary files from the release dir
     - cmd: powershell -Command "Get-ChildItem -Recurse '{{ .RELEASE_DIR }}/' -Include *.pdb,*.xml | Remove-Item"

     - task: pack_parallel

  pack_parallel:
    internal: true
    deps:
     - task: pack_source
  
     - for: { var: TARGET_ARCHES }
       task: postbuild
       vars: { BUILD_MODE: 'debug', TARGET_OS: '{{ .ITEM }}' }

     - for: { var: TARGET_ARCHES }
       task: postbuild
       vars: { BUILD_MODE: 'release', TARGET_OS: '{{ .ITEM }}' }

  postbuild:
    internal: true
    dir: '{{ .USER_WORKING_DIR }}'
    vars:
      BUILD_DIR: "{{ .BINARY_DIR }}/{{ .BUILD_MODE }}/{{ .TARGET_FRAMEWORK }}/{{ .TARGET_OS }}/publish"
    cmds:     
     #copy and readme to target
     - cmd: cp ../build.readme.txt '{{ .BUILD_DIR }}/readme.txt'
     
     #copy release taskfile
     #- cd .. && powershell -Command "Copy-Item -Path ./release.taskfile.yaml -Destination '{{.BUILD_DIR}}/Taskfile.yaml'"

     #tar outputs
     - cmd: cd "{{ .BUILD_DIR }}" && 
         tar{{ if eq OS "windows" }}.exe{{ end }} -czf "{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}/{{ .TARGET_OS }}-{{ .BUILD_MODE }}.tgz" .

  pack_source:
    internal: true
    dir: '{{ .USER_WORKING_DIR }}'
    vars:
      EXCLUDES:
        --exclude='src/bin/*'
        --exclude='src/obj/*'
        #--exclude='.tarignore'
      INCLUDES:
        src/*
        LICENSE
        Taskfile.yaml
        README.md

    cmds:
      #pack up source code and put in output
     - cmd: cd .. && tar{{ if eq OS "windows" }}.exe{{ end }} {{ .EXCLUDES }} -czf '{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}/src.tgz' {{ .INCLUDES }}

    #Remove the output dirs on clean
  clean:
    dir: '{{ .USER_WORKING_DIR }}'
    ignore_error: true
    cmds:
     - cmd: dotnet clean

     - for: [ bin/, obj/ ]
       cmd: rm -rf '{{ .USER_WORKING_DIR }}/{{ .ITEM }}'

